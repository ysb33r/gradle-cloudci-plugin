
plugins {
    id 'com.gradle.build-scan' version '1.0'
    id 'groovy'
    id 'maven'
    id 'com.gradle.plugin-publish' version '0.11.0'
    id 'com.github.hierynomus.license' version '0.13.1'
//    id 'org.ysb33r.gradletest' version '3.0.0-alpha.1'
}

group = 'org.ysb33r.gradle'
version = '4.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    notSnapshot = { !version.endsWith("SNAPSHOT") }
}

repositories {
    mavenCentral()
}

ext {
    depSpock = "org.spockframework:spock-core:1.3-groovy-${GroovySystem.version.replaceAll(/\.\d+$/, '')}"
}

configurations {
    httpbuilder
    compile.extendsFrom httpbuilder
    gradleTestRuntime.extendsFrom httpbuilder
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    httpbuilder 'io.github.http-builder-ng:http-builder-ng-okhttp:1.0.4', {
        exclude group: 'com.burgstaller'
    }
    httpbuilder 'io.github.rburgst:okhttp-digest:1.21'
    testCompile(depSpock) {
        exclude module: 'groovy-all'
    }
}

apply plugin: new GroovyScriptEngine(
    ['src/main/groovy', 'src/main/resources'].
        collect { file(it).absolutePath }
        .toArray(new String[2]),
    project.class.classLoader
).loadScriptByName('org/ysb33r/gradle/cloudci/CiConditionalPlugin.groovy')

groovydoc {
    windowTitle 'Cloud CI Conditional Plugin for Gradle'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    description "An archive of the JavaDocs for Maven Central"
    classifier "javadoc"
    from groovydoc //Javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test {
    exclude '**/CiConditionalPluginWithEnvSpec.class'
    exclude '**/AppveyorTestReporterPluginSpec.class'
}

task environmentTests(type: Test) {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    reports.html.destination = file("${reporting.baseDir}/environmentTests")

    include '**/CiConditionalPluginWithEnvSpec.class'
    include '**/AppveyorTestReporterPluginSpec.class'
    environment APPVEYOR: 1, TRAVIS: 1, CIRCLECI: 1, JENKINS_URL: 1, GITLAB_CI: 1,
        bamboo_build_working_directory: 1, DRONE: 1, CI_NAME: 1, GO_SERVER_URL: 1,
        TEAMCITY_BUILD_PROPERTIES_FILE: 1, CODEBUILD_BUILD_ARN: 1,
        GITHUB_WORKFLOW: 1
    dependsOn testClasses
}

check {
    dependsOn environmentTests
}

pluginBundle {
    website = 'https://github.com/ysb33r/gradle-cloudci-plugin'
    vcsUrl = 'https://github.com/ysb33r/gradle-cloudci-plugin.git'

    tags = ['testing', 'ci', 'appveyor', 'travis-ci', 'circleci', 'codebuild', 'codeship', 'bamboo', 'gitlab']

    plugins {
        cloudciPlugin {
            id = 'org.ysb33r.cloudci'
            displayName = 'Plugin for conditionally adding configuration when on specific cloud CI servers'
            description = 'Control Gradle behaviour on a variety of cloud CI platforms'
        }
        appveyorRestReporterPlugin {
            id = 'org.ysb33r.cloudci.appveyor.testreporter'
            displayName = 'Push test results via Appveyor Build Worker API'
            description = 'Automatically push the test results in real-time when the build is running on Appveyor'
        }
    }
}

publishPlugins {
    onlyIf notSnapshot
    mustRunAfter check
}

license {
    header = rootProject.file('config/HEADER')
    strictCheck = true
    ignoreFailures = false
    ext.year = '2015 - 2020'
    excludes(['**/*.ad', '**/*.asciidoc', '**/*.adoc',
              '**/*.properties',
              '**/*.dsl.*Spec.groovy'])
    mapping 'gradle', 'SLASHSTAR_STYLE'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

publishPlugins {
    onlyIf notSnapshot
}

task release {
    group "Release"
    description "Lifecycle task for release a new version"
    onlyIf notSnapshot
    dependsOn build, publishPlugins, uploadArchives
}


//gradleTest {
//    versions '3.5', '4.8.1', '5.2.1', '6.3'
//}

ci {
    appveyor {
        test {
            environment.remove('APPVEYOR')
        }
    }

    gitlabci {
        test {
            environment.remove('GITLAB_CI')
        }
    }
}

